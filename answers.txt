1. B) `getCurrentUrl()` – Returns the URL of the current page. `getTitle()` returns the page title instead.
2. B) `driver.quit()` – `close()` closes the current window, while `quit()` closes all windows and ends the session.
3. B) WebDriver directly interacts with the browser without using JavaScript – Unlike Selenium RC, WebDriver communicates directly with the browser.
4. D) There is no default; it must be set – Selenium does not set implicit waits automatically.
5. A) `getPageSource()` – Retrieves the HTML source of the current page.
6. C) ID – Locating elements by ID is fastest because it is unique and indexed.
7. C) XPath is slower and brittle for dynamic elements – XPath can break if the page structure changes.
8. A) `checkbox.click()` – Clicks the checkbox if it is not already selected.
9. C) Both A and B – `contains()` in XPath and `^=` or `$=` in CSS allow partial matches.
10. B) `findElements()` – Returns a list of matching elements; `findElement()` returns only the first match.
11. A) Implicit wait is applied globally; explicit wait is applied to specific elements – Explicit waits target conditions on specific elements.
12. A) `WebDriverWait` – Used in combination with `ExpectedConditions` to implement explicit waits.
13. A) `ignoring(NoSuchElementException.class)` – Allows ignoring exceptions while waiting in explicit waits.
14. B) Explicit wait – Recommended for dynamically loaded content to wait for specific conditions.
15. B) `ExpectedConditions.elementToBeClickable(element)` – Waits until the element is clickable.
16. B) `@BeforeClass` – Runs before all tests in a class.
17. A) Use `parallel="methods"` or `parallel="classes"` in testng.xml – TestNG handles parallel execution using this configuration.
18. B) `Assert.assertEquals(actual, expected)` – Correct method for asserting equality in TestNG.
19. C) throw SkipException – Skips a test conditionally in TestNG.
20. C) `@AfterClass` – Runs after all tests in a class.
21. B) `@BeforeTest` – Runs before any test belonging to the `<test>` tag in testng.xml.
22. D) `@AfterSuite` – Runs after all tests in the suite have completed.
23. A) `@BeforeMethod` – Runs before each test method.
24. B) `@AfterMethod` – Runs after each test method.
25. A) `assertTrue(condition)` – Asserts that a condition is true.
26. B) `assertFalse(condition)` – Asserts that a condition is false.
27. D) `@DataProvider` – Provides data for test methods.
28. A) `@Factory` – Used to create instances of test classes dynamically.
29. C) Use `dependsOnMethods` – Specifies that a test method depends on another method.
30. B) Use `priority` – Specifies the order of test execution in TestNG.
31. A) Selenium IDE – Tool for record-and-playback testing.
32. C) Selenium WebDriver – Tool for writing code-based automated tests.
33. B) Selenium Grid – Tool for distributed test execution.
34. A) ChromeDriver, GeckoDriver – WebDriver implementations for specific browsers.
35. B) XPath, CSS Selector – Most commonly used locators in Selenium.
36. D) Tag Name – Less commonly used locator, only for simple elements.
37. B) Actions class – Used to handle advanced user interactions.
38. C) Robot class – Handles OS-level events like file uploads.
39. A) JavascriptExecutor – Executes JavaScript in the browser context.
40. B) Alert interface – Handles alerts, prompts, and confirmation dialogs.
41. D) Window handles – Used to switch between multiple windows or tabs.
42. C) Frame switching – `driver.switchTo().frame()` switches to a frame.
43. B) `ThreadLocal<WebDriver>` – Ensures thread safety for parallel execution.
44. A) DesiredCapabilities – Used to specify browser capabilities in Grid.
45. B) Hub – Central server that manages Grid nodes.
46. C) Node – Executes tests based on Hub instructions.
47. D) Registry – Not directly used in Selenium; Hub and Nodes manage communication.
48. B) Execute tests in parallel – Main purpose of Selenium Grid.
49. B) Hub – Acts as the central point to manage nodes.
50. A) Using DesiredCapabilities – Specifies which browser/version a node should run.
