[
  {
    "questionText": "Which WebDriver method is used to navigate to a URL?",
    "options": [
      "A) get()",
      "B) goTo()",
      "C) navigate()",
      "D) open()"
    ]
  },
  {
    "questionText": "Which of the following is not a WebDriver locator strategy?",
    "options": [
      "A) By.id",
      "B) By.linkText",
      "C) By.classValue",
      "D) By.cssSelector"
    ]
  },
  {
    "questionText": "What does the `driver.quit()` command do in Selenium?",
    "options": [
      "A) Closes current tab only",
      "B) Closes the browser and ends session",
      "C) Refreshes the browser",
      "D) Logs out user"
    ]
  },
  {
    "questionText": "What is the default polling time for WebDriverWait in Selenium?",
    "options": [
      "A) 250 milliseconds",
      "B) 500 milliseconds",
      "C) 1 second",
      "D) 2 seconds"
    ]
  },
  {
    "questionText": "Which interface does WebDriver extend?",
    "options": [
      "A) SearchContext",
      "B) WebElement",
      "C) RemoteWebDriver",
      "D) EventFiringWebDriver"
    ]
  },
  {
    "questionText": "Which of the following is true about `findElement`?",
    "options": [
      "A) Returns list of matching elements",
      "B) Throws `NoSuchElementException` if not found",
      "C) Returns null if element missing",
      "D) Waits indefinitely"
    ]
  },
  {
    "questionText": "Which Selenium class supports taking screenshots?",
    "options": [
      "A) Screenshot",
      "B) TakesScreenshot",
      "C) CaptureScreen",
      "D) ScreenShotDriver"
    ]
  },
  {
    "questionText": "In Page Object Model (POM), which of the following is correct?",
    "options": [
      "A) Each test case has hardcoded locators",
      "B) Pages and locators are separated from test logic",
      "C) Test methods include all page logic",
      "D) Not supported in Selenium"
    ]
  },
  {
    "questionText": "Which TestNG annotation is executed before any test method in a class?",
    "options": [
      "A) @BeforeTest",
      "B) @BeforeClass",
      "C) @BeforeMethod",
      "D) @BeforeSuite"
    ]
  },
  {
    "questionText": "Which command is used to simulate pressing Enter in Selenium?",
    "options": [
      "A) Keys.ENTER",
      "B) Keys.RETURN",
      "C) sendKeys(\"\\n\")",
      "D) All of the above"
    ]
  },
  {
    "questionText": "Implicit wait applies to:",
    "options": [
      "A) All elements globally",
      "B) Only one findElement call",
      "C) Only findElements",
      "D) Only explicit wait"
    ]
  },
  {
    "questionText": "Which WebDriver method is used to switch to an alert?",
    "options": [
      "A) driver.handleAlert()",
      "B) driver.switchTo().alert()",
      "C) driver.getAlert()",
      "D) driver.switchAlert()"
    ]
  },
  {
    "questionText": "Which of these is true about TestNG parallel execution?",
    "options": [
      "A) Runs only sequentially",
      "B) Supports parallel at suite, test, class, method levels",
      "C) Does not support multi-threading",
      "D) Only parallel by method level"
    ]
  },
  {
    "questionText": "Which of these is NOT an advantage of TestNG over JUnit?",
    "options": [
      "A) Parameterization",
      "B) Flexible annotations",
      "C) Built-in reports",
      "D) WebDriver integration"
    ]
  },
  {
    "questionText": "In Selenium Grid, what is a Hub?",
    "options": [
      "A) Node executor",
      "B) Central server that controls test execution",
      "C) Browser instance",
      "D) TestNG configuration"
    ]
  },
  {
    "questionText": "Which of the following can be used to handle dropdowns in Selenium?",
    "options": [
      "A) Select class",
      "B) DropdownHandler class",
      "C) WebElement.select()",
      "D) DropDown class"
    ]
  },
  {
    "questionText": "Which is not a valid locator strategy?",
    "options": [
      "A) By.partialLinkText",
      "B) By.tagName",
      "C) By.xpath",
      "D) By.value"
    ]
  },
  {
    "questionText": "FluentWait differs from WebDriverWait because:",
    "options": [
      "A) Allows custom polling interval",
      "B) Doesn’t handle exceptions",
      "C) Doesn’t accept timeout",
      "D) Is synchronous only"
    ]
  },
  {
    "questionText": "Which TestNG annotation runs once after all tests in the suite?",
    "options": [
      "A) @AfterMethod",
      "B) @AfterClass",
      "C) @AfterTest",
      "D) @AfterSuite"
    ]
  },
  {
    "questionText": "Which method is used to clear input fields in Selenium?",
    "options": [
      "A) clear()",
      "B) reset()",
      "C) empty()",
      "D) delete()"
    ]
  },
  {
    "questionText": "Which interface does WebElement extend?",
    "options": [
      "A) SearchContext",
      "B) Locatable",
      "C) Both A and B",
      "D) None"
    ]
  },
  {
    "questionText": "Which of the following is not a Selenium component?",
    "options": [
      "A) WebDriver",
      "B) RC",
      "C) IDE",
      "D) Appium"
    ]
  },
  {
    "questionText": "What is returned by driver.findElements() if no match?",
    "options": [
      "A) null",
      "B) empty list",
      "C) exception",
      "D) false"
    ]
  },
  {
    "questionText": "The default time unit for Thread.sleep() in Java is:",
    "options": [
      "A) Seconds",
      "B) Milliseconds",
      "C) Nanoseconds",
      "D) Minutes"
    ]
  },
  {
    "questionText": "Which of these allows running Selenium tests in headless mode?",
    "options": [
      "A) ChromeOptions",
      "B) HtmlUnitDriver",
      "C) FirefoxOptions",
      "D) All of the above"
    ]
  },
  {
    "questionText": "Which WebDriver method fetches current page title?",
    "options": [
      "A) driver.pageTitle()",
      "B) driver.getTitle()",
      "C) driver.title()",
      "D) driver.getPageTitle()"
    ]
  },
  {
    "questionText": "Which of these waits is not provided by Selenium directly?",
    "options": [
      "A) Implicit wait",
      "B) Explicit wait",
      "C) Fluent wait",
      "D) Hard wait"
    ]
  },
  {
    "questionText": "Which TestNG feature allows executing same test with different data?",
    "options": [
      "A) @Factory",
      "B) @DataProvider",
      "C) @Parameters",
      "D) @Repeat"
    ]
  },
  {
    "questionText": "What is the default scope of variables in TestNG XML parameter?",
    "options": [
      "A) suite",
      "B) test",
      "C) class",
      "D) method"
    ]
  },
  {
    "questionText": "Which locator is most reliable?",
    "options": [
      "A) XPath with indexes",
      "B) Absolute XPath",
      "C) ID",
      "D) LinkText"
    ]
  },
  {
    "questionText": "How to perform double-click in Selenium?",
    "options": [
      "A) driver.doubleClick()",
      "B) new Actions(driver).doubleClick(element).perform()",
      "C) element.doubleClick()",
      "D) robot.doubleClick()"
    ]
  },
  {
    "questionText": "Which is NOT part of Actions class?",
    "options": [
      "A) dragAndDrop()",
      "B) contextClick()",
      "C) moveToElement()",
      "D) setText()"
    ]
  },
  {
    "questionText": "TestNG dependsOnMethods is used to:",
    "options": [
      "A) Execute in priority order",
      "B) Skip tests unless dependent method passes",
      "C) Repeat tests",
      "D) Run in parallel"
    ]
  },
  {
    "questionText": "Which driver is platform-independent?",
    "options": [
      "A) ChromeDriver",
      "B) FirefoxDriver",
      "C) RemoteWebDriver",
      "D) EdgeDriver"
    ]
  },
  {
    "questionText": "Which method closes the current tab in WebDriver?",
    "options": [
      "A) quit()",
      "B) close()",
      "C) shutdown()",
      "D) exit()"
    ]
  },
  {
    "questionText": "PageFactory in Selenium is used for:",
    "options": [
      "A) Dynamic waits",
      "B) Initializing web elements with @FindBy",
      "C) Running parallel tests",
      "D) Logging"
    ]
  },
  {
    "questionText": "In TestNG, which annotation will skip execution if enabled=false?",
    "options": [
      "A) @Test(enabled=false)",
      "B) @Ignore",
      "C) @Disabled",
      "D) @Skip"
    ]
  },
  {
    "questionText": "Which of the following is used for continuous integration with Selenium?",
    "options": [
      "A) Jenkins",
      "B) JIRA",
      "C) TestNG",
      "D) Appium"
    ]
  },
  {
    "questionText": "Which annotation in TestNG executes once before all suites?",
    "options": [
      "A) @BeforeSuite",
      "B) @BeforeTest",
      "C) @BeforeClass",
      "D) @BeforeMethod"
    ]
  },
  {
    "questionText": "Which of the following is NOT a WebDriver exception?",
    "options": [
      "A) NoSuchElementException",
      "B) TimeoutException",
      "C) SQLException",
      "D) ElementNotVisibleException"
    ]
  },
  {
    "questionText": "Which language is NOT supported by Selenium WebDriver?",
    "options": [
      "A) Java",
      "B) Python",
      "C) Ruby",
      "D) C"
    ]
  },
  {
    "questionText": "Which TestNG annotation is used for parameterization via XML?",
    "options": [
      "A) @Parameters",
      "B) @DataProvider",
      "C) @Factory",
      "D) @ValueSource"
    ]
  },
  {
    "questionText": "What is the return type of getWindowHandles()?",
    "options": [
      "A) List<String>",
      "B) Set<String>",
      "C) Map<String, Window>",
      "D) Array<String>"
    ]
  },
  {
    "questionText": "Which of the following can simulate keyboard/mouse events?",
    "options": [
      "A) Actions class",
      "B) Robot class",
      "C) JavascriptExecutor",
      "D) Both A and B"
    ]
  },
  {
    "questionText": "Which is not a feature of Selenium Grid?",
    "options": [
      "A) Parallel execution",
      "B) Cross-browser testing",
      "C) Mobile automation",
      "D) Distributed execution"
    ]
  },
  {
    "questionText": "Which of these methods is not in WebDriver interface?",
    "options": [
      "A) get()",
      "B) navigate()",
      "C) manage()",
      "D) setText()"
    ]
  },
  {
    "questionText": "In Selenium, isDisplayed() returns:",
    "options": [
      "A) true if visible",
      "B) false if hidden",
      "C) exception if not present",
      "D) All of the above"
    ]
  },
  {
    "questionText": "Which command refreshes the current page?",
    "options": [
      "A) driver.refresh()",
      "B) driver.navigate().refresh()",
      "C) driver.reload()",
      "D) driver.restart()"
    ]
  },
  {
    "questionText": "Which of these cannot locate shadow DOM elements?",
    "options": [
      "A) By.cssSelector",
      "B) By.id",
      "C) executeScript with shadowRoot",
      "D) WebDriver native"
    ]
  },
  {
    "questionText": "Which of these can execute JavaScript in Selenium?",
    "options": [
      "A) JavascriptExecutor",
      "B) Actions",
      "C) Robot",
      "D) WebElement"
    ]
  },
  {
    "questionText": "Which locator is fastest in Selenium?",
    "options": [
      "A) ID",
      "B) CSS Selector",
      "C) XPath",
      "D) Name"
    ]
  },
  {
    "questionText": "Which Selenium version removed RC support?",
    "options": [
      "A) 2",
      "B) 3",
      "C) 4",
      "D) None"
    ]
  },
  {
    "questionText": "Which WebDriver method returns current URL?",
    "options": [
      "A) getPageSource()",
      "B) getCurrentUrl()",
      "C) getUrl()",
      "D) fetchUrl()"
    ]
  },
  {
    "questionText": "Which of the following is NOT true about implicit waits?",
    "options": [
      "A) Applied globally",
      "B) Stops immediately when element found",
      "C) Can be overridden by explicit wait",
      "D) Throws TimeoutException"
    ]
  },
  {
    "questionText": "How to handle multiple windows in WebDriver?",
    "options": [
      "A) driver.switchTo().window(handle)",
      "B) driver.windowSwitch(handle)",
      "C) driver.selectWindow(handle)",
      "D) driver.chooseWindow(handle)"
    ]
  },
  {
    "questionText": "Which TestNG annotation is executed after each test method?",
    "options": [
      "A) @AfterSuite",
      "B) @AfterMethod",
      "C) @AfterClass",
      "D) @AfterTest"
    ]
  },
  {
    "questionText": "Which of the following is NOT a synchronization technique?",
    "options": [
      "A) Implicit wait",
      "B) Thread.sleep()",
      "C) Explicit wait",
      "D) Hardcode locator"
    ]
  },
  {
    "questionText": "Which of these is NOT a browser supported by Selenium officially?",
    "options": [
      "A) Chrome",
      "B) Safari",
      "C) IE",
      "D) Opera"
    ]
  },
  {
    "questionText": "Which of the following allows remote execution?",
    "options": [
      "A) Selenium Grid",
      "B) Selenium IDE",
      "C) Selenium RC",
      "D) None"
    ]
  },
  {
    "questionText": "Which TestNG annotation is executed before test methods in a class?",
    "options": [
      "A) @BeforeClass",
      "B) @BeforeTest",
      "C) @BeforeMethod",
      "D) @BeforeSuite"
    ]
  },
  {
    "questionText": "Which is NOT true about WebDriver?",
    "options": [
      "A) Supports multiple languages",
      "B) Controls browsers natively",
      "C) Needs browser-specific drivers",
      "D) Can automate desktop apps"
    ]
  },
  {
    "questionText": "Which is NOT a valid WebDriver command?",
    "options": [
      "A) driver.findElement()",
      "B) driver.manage()",
      "C) driver.executeScript()",
      "D) driver.click()"
    ]
  },
  {
    "questionText": "Which of the following locators should be avoided?",
    "options": [
      "A) ID",
      "B) CSS Selector",
      "C) Absolute XPath",
      "D) Name"
    ]
  },
  {
    "questionText": "Which TestNG annotation executes only once before all tests in XML <test> tag?",
    "options": [
      "A) @BeforeSuite",
      "B) @BeforeTest",
      "C) @BeforeClass",
      "D) @BeforeMethod"
    ]
  },
  {
    "questionText": "Which return type does findElement() have?",
    "options": [
      "A) WebElement",
      "B) List<WebElement>",
      "C) Set<WebElement>",
      "D) void"
    ]
  },
  {
    "questionText": "Which method is used to maximize browser?",
    "options": [
      "A) driver.maximize()",
      "B) driver.manage().window().maximize()",
      "C) driver.fullscreen()",
      "D) driver.openMax()"
    ]
  },
  {
    "questionText": "Which WebDriver method navigates back?",
    "options": [
      "A) driver.back()",
      "B) driver.navigate().back()",
      "C) driver.goBack()",
      "D) driver.window().back()"
    ]
  },
  {
    "questionText": "Which is NOT a WebDriver wait class?",
    "options": [
      "A) WebDriverWait",
      "B) FluentWait",
      "C) ExpectedConditions",
      "D) HardWait"
    ]
  },
  {
    "questionText": "Which of these tools manages test execution reports?",
    "options": [
      "A) TestNG",
      "B) Maven Surefire",
      "C) Extent Reports",
      "D) All of the above"
    ]
  },
  {
    "questionText": "Which WebDriver method fetches page source?",
    "options": [
      "A) getHTML()",
      "B) getPageSource()",
      "C) fetchHTML()",
      "D) source()"
    ]
  },
  {
    "questionText": "Which method is used to submit a form?",
    "options": [
      "A) element.submit()",
      "B) driver.submit()",
      "C) form.send()",
      "D) element.click()"
    ]
  },
  {
    "questionText": "Which of the following is NOT a capability of WebDriver?",
    "options": [
      "A) Handle popups",
      "B) Handle desktop notifications",
      "C) Handle multiple tabs",
      "D) Handle alerts"
    ]
  },
  {
    "questionText": "Which driver can be used without an actual browser?",
    "options": [
      "A) HtmlUnitDriver",
      "B) ChromeDriver",
      "C) EdgeDriver",
      "D) SafariDriver"
    ]
  },
  {
    "questionText": "What is the return type of driver.getWindowHandle()?",
    "options": [
      "A) String",
      "B) List<String>",
      "C) Set<String>",
      "D) Map<String,String>"
    ]
  },
  {
    "questionText": "Which of the following is NOT a way to locate elements?",
    "options": [
      "A) By.name",
      "B) By.title",
      "C) By.cssSelector",
      "D) By.linkText"
    ]
  },
  {
    "questionText": "Which of the following is NOT supported in Selenium?",
    "options": [
      "A) File upload",
      "B) Capturing screenshots",
      "C) Capturing video natively",
      "D) Handling iframes"
    ]
  },
  {
    "questionText": "Which is NOT a TestNG assertion?",
    "options": [
      "A) assertEquals",
      "B) assertTrue",
      "C) assertContains",
      "D) assertNull"
    ]
  },
  {
    "questionText": "What is the advantage of Page Object Model?",
    "options": [
      "A) Reduces code duplication",
      "B) Improves readability",
      "C) Separates test logic and locators",
      "D) All of the above"
    ]
  },
  {
    "questionText": "Which of these can simulate drag and drop?",
    "options": [
      "A) Actions class",
      "B) JavascriptExecutor",
      "C) Robot class",
      "D) Both A and C"
    ]
  },
  {
    "questionText": "Which of the following can be used for Maven dependencies in Selenium?",
    "options": [
      "A) pom.xml",
      "B) build.gradle",
      "C) testng.xml",
      "D) settings.xml"
    ]
  },
  {
    "questionText": "Which of these is NOT true about TestNG?",
    "options": [
      "A) Supports parallel execution",
      "B) Can group test cases",
      "C) Supports only Java",
      "D) Generates reports"
    ]
  },
  {
    "questionText": "Which of the following cannot be automated by Selenium?",
    "options": [
      "A) Web apps",
      "B) Mobile apps",
      "C) Windows desktop apps",
      "D) Both B and C"
    ]
  },
  {
    "questionText": "Which of the following waits retries until condition met?",
    "options": [
      "A) Explicit wait",
      "B) Implicit wait",
      "C) Thread.sleep()",
      "D) Hard wait"
    ]
  },
  {
    "questionText": "Which is the correct syntax for switching to a frame by index?",
    "options": [
      "A) driver.switchTo().frame(0)",
      "B) driver.switchTo(0)",
      "C) driver.frame(0)",
      "D) driver.getFrame(0)"
    ]
  },
  {
    "questionText": "Which driver requires Safari’s allow remote automation enabled?",
    "options": [
      "A) SafariDriver",
      "B) ChromeDriver",
      "C) EdgeDriver",
      "D) RemoteWebDriver"
    ]
  },
  {
    "questionText": "Which WebDriver method deletes all cookies?",
    "options": [
      "A) driver.clearCookies()",
      "B) driver.deleteAllCookies()",
      "C) driver.manage().deleteAllCookies()",
      "D) driver.removeCookies()"
    ]
  },
  {
    "questionText": "Which type of XPath is more stable?",
    "options": [
      "A) Absolute XPath",
      "B) Relative XPath",
      "C) Dynamic XPath with index",
      "D) None"
    ]
  },
  {
    "questionText": "Which is NOT a Maven build lifecycle?",
    "options": [
      "A) validate",
      "B) compile",
      "C) run",
      "D) package"
    ]
  },
  {
    "questionText": "Which Selenium method handles JavaScript alerts?",
    "options": [
      "A) driver.switchTo().alert()",
      "B) driver.alert()",
      "C) driver.handleAlert()",
      "D) driver.manage().alert()"
    ]
  },
  {
    "questionText": "Which method returns true if element is enabled?",
    "options": [
      "A) isEnabled()",
      "B) isActive()",
      "C) isClickable()",
      "D) isPresent()"
    ]
  },
  {
    "questionText": "Which WebDriver method deletes a specific cookie?",
    "options": [
      "A) driver.manage().deleteCookieNamed(\"name\")",
      "B) driver.deleteCookie(\"name\")",
      "C) driver.removeCookie(\"name\")",
      "D) driver.delete(\"cookie\")"
    ]
  },
  {
    "questionText": "Which tool is commonly integrated with Selenium for BDD?",
    "options": [
      "A) TestNG",
      "B) Cucumber",
      "C) JUnit",
      "D) JIRA"
    ]
  },
  {
    "questionText": "Which command is used to navigate forward?",
    "options": [
      "A) driver.forward()",
      "B) driver.navigate().forward()",
      "C) driver.goForward()",
      "D) driver.window().forward()"
    ]
  },
  {
    "questionText": "Which WebDriver method resizes browser window?",
    "options": [
      "A) driver.manage().window().setSize()",
      "B) driver.resize()",
      "C) driver.setDimension()",
      "D) driver.windowResize()"
    ]
  },
  {
    "questionText": "Which exception is thrown if element is not found?",
    "options": [
      "A) ElementNotFoundException",
      "B) NoSuchElementException",
      "C) TimeoutException",
      "D) NotFoundException"
    ]
  },
  {
    "questionText": "Which of the following is NOT a WebDriver navigation command?",
    "options": [
      "A) to()",
      "B) back()",
      "C) forward()",
      "D) wait()"
    ]
  },
  {
    "questionText": "Which TestNG listener tracks test start, success, failure?",
    "options": [
      "A) ITestListener",
      "B) ISuiteListener",
      "C) IReporter",
      "D) IAnnotationTransformer"
    ]
  },
  {
    "questionText": "Which Selenium component is used for recording tests?",
    "options": [
      "A) Selenium IDE",
      "B) Selenium RC",
      "C) Selenium Grid",
      "D) WebDriver"
    ]
  },
  {
    "questionText": "Which of the following can capture network traffic?",
    "options": [
      "A) Selenium alone",
      "B) BrowserMob Proxy",
      "C) WebDriver API",
      "D) None"
    ]
  },
  {
    "questionText": "Which WebDriver method closes all browser windows?",
    "options": [
      "A) close()",
      "B) quit()",
      "C) exit()",
      "D) shutdown()"
    ]
  }
]